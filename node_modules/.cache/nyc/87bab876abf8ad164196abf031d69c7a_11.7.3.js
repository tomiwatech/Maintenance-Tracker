'use strict';

var cov_2fzrqh236c = function () {
  var path = '/home/tomiwatech/Desktop/projects/Andela/bootCamp/Maintenance-Tracker/server/middlewares/validators/users.js',
      hash = 'be0c2f5b337615f6829593c332f3acb28a212ea2',
      Function = function () {}.constructor,
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/home/tomiwatech/Desktop/projects/Andela/bootCamp/Maintenance-Tracker/server/middlewares/validators/users.js',
    statementMap: {
      '0': {
        start: {
          line: 5,
          column: 8
        },
        end: {
          line: 5,
          column: 16
        }
      },
      '1': {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 11,
          column: 5
        }
      },
      '2': {
        start: {
          line: 7,
          column: 6
        },
        end: {
          line: 10,
          column: 9
        }
      },
      '3': {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 11
        }
      },
      '4': {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 18
        }
      },
      '5': {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 24,
          column: 5
        }
      },
      '6': {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 23,
          column: 9
        }
      },
      '7': {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 11
        }
      },
      '8': {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 16
        }
      },
      '9': {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      '10': {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 36,
          column: 9
        }
      },
      '11': {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 11
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 2,
            column: 3
          }
        },
        loc: {
          start: {
            line: 2,
            column: 42
          },
          end: {
            line: 13,
            column: 3
          }
        },
        line: 2
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        },
        loc: {
          start: {
            line: 15,
            column: 39
          },
          end: {
            line: 26,
            column: 3
          }
        },
        line: 15
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        },
        loc: {
          start: {
            line: 28,
            column: 44
          },
          end: {
            line: 39,
            column: 3
          }
        },
        line: 28
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        }, {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        }],
        line: 6
      },
      '1': {
        loc: {
          start: {
            line: 6,
            column: 8
          },
          end: {
            line: 6,
            column: 86
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 6,
            column: 8
          },
          end: {
            line: 6,
            column: 19
          }
        }, {
          start: {
            line: 6,
            column: 23
          },
          end: {
            line: 6,
            column: 35
          }
        }, {
          start: {
            line: 6,
            column: 39
          },
          end: {
            line: 6,
            column: 56
          }
        }, {
          start: {
            line: 6,
            column: 60
          },
          end: {
            line: 6,
            column: 69
          }
        }, {
          start: {
            line: 6,
            column: 73
          },
          end: {
            line: 6,
            column: 86
          }
        }],
        line: 6
      },
      '2': {
        loc: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }, {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }],
        line: 19
      },
      '3': {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }],
        line: 32
      },
      '4': {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 86
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 19
          }
        }, {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 35
          }
        }, {
          start: {
            line: 32,
            column: 39
          },
          end: {
            line: 32,
            column: 56
          }
        }, {
          start: {
            line: 32,
            column: 60
          },
          end: {
            line: 32,
            column: 69
          }
        }, {
          start: {
            line: 32,
            column: 73
          },
          end: {
            line: 32,
            column: 86
          }
        }],
        line: 32
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0, 0, 0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0, 0, 0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserMiddlewareValidator = function () {
  function UserMiddlewareValidator() {
    _classCallCheck(this, UserMiddlewareValidator);
  }

  _createClass(UserMiddlewareValidator, null, [{
    key: 'validatePostBody',
    value: function validatePostBody(req, res, next) {
      cov_2fzrqh236c.f[0]++;

      var _ref = (cov_2fzrqh236c.s[0]++, req.body),
          name = _ref.name,
          model = _ref.model,
          desciption = _ref.desciption,
          id = _ref.id,
          defect = _ref.defect;

      cov_2fzrqh236c.s[1]++;

      if ((cov_2fzrqh236c.b[1][0]++, name === '') || (cov_2fzrqh236c.b[1][1]++, model === '') || (cov_2fzrqh236c.b[1][2]++, desciption === '') || (cov_2fzrqh236c.b[1][3]++, id === '') || (cov_2fzrqh236c.b[1][4]++, defect === '')) {
        cov_2fzrqh236c.b[0][0]++;
        cov_2fzrqh236c.s[2]++;

        return res.status(400).json({
          responseCode: '01',
          responseMessage: 'Please fill all fields'
        });
      } else {
        cov_2fzrqh236c.b[0][1]++;
      }
      cov_2fzrqh236c.s[3]++;
      next();
    }
  }, {
    key: 'validateGetId',
    value: function validateGetId(req, res, next) {
      cov_2fzrqh236c.f[1]++;

      var _ref2 = (cov_2fzrqh236c.s[4]++, req.params),
          id = _ref2.id;

      cov_2fzrqh236c.s[5]++;

      if (typeof id !== 'string') {
        cov_2fzrqh236c.b[2][0]++;
        cov_2fzrqh236c.s[6]++;

        return res.status(400).json({
          responseCode: '01',
          responseMessage: 'Please enter request ID'
        });
      } else {
        cov_2fzrqh236c.b[2][1]++;
      }
      cov_2fzrqh236c.s[7]++;
      next();
    }
  }, {
    key: 'validateUpdateBody',
    value: function validateUpdateBody(req, res, next) {
      cov_2fzrqh236c.f[2]++;

      var _ref3 = (cov_2fzrqh236c.s[8]++, req.body),
          name = _ref3.name,
          model = _ref3.model,
          desciption = _ref3.desciption,
          id = _ref3.id,
          defect = _ref3.defect;

      cov_2fzrqh236c.s[9]++;

      if ((cov_2fzrqh236c.b[4][0]++, name === '') || (cov_2fzrqh236c.b[4][1]++, model === '') || (cov_2fzrqh236c.b[4][2]++, desciption === '') || (cov_2fzrqh236c.b[4][3]++, id === '') || (cov_2fzrqh236c.b[4][4]++, defect === '')) {
        cov_2fzrqh236c.b[3][0]++;
        cov_2fzrqh236c.s[10]++;

        return res.status(400).json({
          responseCode: '01',
          responseMessage: 'Please fill all fields'
        });
      } else {
        cov_2fzrqh236c.b[3][1]++;
      }
      cov_2fzrqh236c.s[11]++;
      next();
    }
  }]);

  return UserMiddlewareValidator;
}();

exports.default = UserMiddlewareValidator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJzLmpzIl0sIm5hbWVzIjpbIlVzZXJNaWRkbGV3YXJlVmFsaWRhdG9yIiwicmVxIiwicmVzIiwibmV4dCIsImJvZHkiLCJuYW1lIiwibW9kZWwiLCJkZXNjaXB0aW9uIiwiaWQiLCJkZWZlY3QiLCJzdGF0dXMiLCJqc29uIiwicmVzcG9uc2VDb2RlIiwicmVzcG9uc2VNZXNzYWdlIiwicGFyYW1zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFNQSx1Qjs7Ozs7OztxQ0FDb0JDLEcsRUFBS0MsRyxFQUFLQyxJLEVBQU07QUFBQTs7QUFBQSx5Q0FHbENGLElBQUlHLElBSDhCO0FBQUEsVUFFcENDLElBRm9DLFFBRXBDQSxJQUZvQztBQUFBLFVBRTlCQyxLQUY4QixRQUU5QkEsS0FGOEI7QUFBQSxVQUV2QkMsVUFGdUIsUUFFdkJBLFVBRnVCO0FBQUEsVUFFWEMsRUFGVyxRQUVYQSxFQUZXO0FBQUEsVUFFUEMsTUFGTyxRQUVQQSxNQUZPOztBQUFBOztBQUl0QyxVQUFJLG9DQUFTLEVBQVQsZ0NBQWVILFVBQVUsRUFBekIsZ0NBQStCQyxlQUFlLEVBQTlDLGdDQUFvREMsT0FBTyxFQUEzRCxnQ0FBaUVDLFdBQVcsRUFBNUUsQ0FBSixFQUFvRjtBQUFBO0FBQUE7O0FBQ2xGLGVBQU9QLElBQUlRLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsd0JBQWMsSUFEWTtBQUUxQkMsMkJBQWlCO0FBRlMsU0FBckIsQ0FBUDtBQUlELE9BTEQ7QUFBQTtBQUFBO0FBSnNDO0FBVXRDVjtBQUNEOzs7a0NBRW9CRixHLEVBQUtDLEcsRUFBS0MsSSxFQUFNO0FBQUE7O0FBQUEsMENBRy9CRixJQUFJYSxNQUgyQjtBQUFBLFVBRWpDTixFQUZpQyxTQUVqQ0EsRUFGaUM7O0FBQUE7O0FBSW5DLFVBQUksT0FBUUEsRUFBUixLQUFnQixRQUFwQixFQUE4QjtBQUFBO0FBQUE7O0FBQzVCLGVBQU9OLElBQUlRLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsd0JBQWMsSUFEWTtBQUUxQkMsMkJBQWlCO0FBRlMsU0FBckIsQ0FBUDtBQUlELE9BTEQ7QUFBQTtBQUFBO0FBSm1DO0FBVW5DVjtBQUNEOzs7dUNBRXlCRixHLEVBQUtDLEcsRUFBS0MsSSxFQUFNO0FBQUE7O0FBQUEsMENBR3BDRixJQUFJRyxJQUhnQztBQUFBLFVBRXRDQyxJQUZzQyxTQUV0Q0EsSUFGc0M7QUFBQSxVQUVoQ0MsS0FGZ0MsU0FFaENBLEtBRmdDO0FBQUEsVUFFekJDLFVBRnlCLFNBRXpCQSxVQUZ5QjtBQUFBLFVBRWJDLEVBRmEsU0FFYkEsRUFGYTtBQUFBLFVBRVRDLE1BRlMsU0FFVEEsTUFGUzs7QUFBQTs7QUFJeEMsVUFBSSxvQ0FBUyxFQUFULGdDQUFlSCxVQUFVLEVBQXpCLGdDQUErQkMsZUFBZSxFQUE5QyxnQ0FBb0RDLE9BQU8sRUFBM0QsZ0NBQWlFQyxXQUFXLEVBQTVFLENBQUosRUFBb0Y7QUFBQTtBQUFBOztBQUNsRixlQUFPUCxJQUFJUSxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFDMUJDLHdCQUFjLElBRFk7QUFFMUJDLDJCQUFpQjtBQUZTLFNBQXJCLENBQVA7QUFJRCxPQUxEO0FBQUE7QUFBQTtBQUp3QztBQVV4Q1Y7QUFDRDs7Ozs7O2tCQUdZSCx1QiIsImZpbGUiOiJ1c2Vycy5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS90b21pd2F0ZWNoL0Rlc2t0b3AvcHJvamVjdHMvQW5kZWxhL2Jvb3RDYW1wL01haW50ZW5hbmNlLVRyYWNrZXIvc2VydmVyL21pZGRsZXdhcmVzL3ZhbGlkYXRvcnMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBVc2VyTWlkZGxld2FyZVZhbGlkYXRvciB7XG4gIHN0YXRpYyB2YWxpZGF0ZVBvc3RCb2R5KHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgY29uc3Qge1xuICAgICAgbmFtZSwgbW9kZWwsIGRlc2NpcHRpb24sIGlkLCBkZWZlY3RcbiAgICB9ID0gcmVxLmJvZHk7XG4gICAgaWYgKG5hbWUgPT09ICcnIHx8IG1vZGVsID09PSAnJyB8fCBkZXNjaXB0aW9uID09PSAnJyB8fCBpZCA9PT0gJycgfHwgZGVmZWN0ID09PSAnJykge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgcmVzcG9uc2VDb2RlOiAnMDEnLFxuICAgICAgICByZXNwb25zZU1lc3NhZ2U6ICdQbGVhc2UgZmlsbCBhbGwgZmllbGRzJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIG5leHQoKTtcbiAgfVxuXG4gIHN0YXRpYyB2YWxpZGF0ZUdldElkKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgY29uc3Qge1xuICAgICAgaWRcbiAgICB9ID0gcmVxLnBhcmFtcztcbiAgICBpZiAodHlwZW9mIChpZCkgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICByZXNwb25zZUNvZGU6ICcwMScsXG4gICAgICAgIHJlc3BvbnNlTWVzc2FnZTogJ1BsZWFzZSBlbnRlciByZXF1ZXN0IElEJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIG5leHQoKTtcbiAgfVxuXG4gIHN0YXRpYyB2YWxpZGF0ZVVwZGF0ZUJvZHkocmVxLCByZXMsIG5leHQpIHtcbiAgICBjb25zdCB7XG4gICAgICBuYW1lLCBtb2RlbCwgZGVzY2lwdGlvbiwgaWQsIGRlZmVjdFxuICAgIH0gPSByZXEuYm9keTtcbiAgICBpZiAobmFtZSA9PT0gJycgfHwgbW9kZWwgPT09ICcnIHx8IGRlc2NpcHRpb24gPT09ICcnIHx8IGlkID09PSAnJyB8fCBkZWZlY3QgPT09ICcnKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICByZXNwb25zZUNvZGU6ICcwMScsXG4gICAgICAgIHJlc3BvbnNlTWVzc2FnZTogJ1BsZWFzZSBmaWxsIGFsbCBmaWVsZHMnXG4gICAgICB9KTtcbiAgICB9XG4gICAgbmV4dCgpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJNaWRkbGV3YXJlVmFsaWRhdG9yO1xuIl19