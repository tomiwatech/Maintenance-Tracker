{"version":3,"sources":["userController.js"],"names":["dataStore","userClass","req","res","next","console","log","body","push","status","json","foundAt","find","splice","pop","id","params","i","length","name","model","desciption","defect","foundOne","userController"],"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","file":"userController.js","sourceRoot":"/home/tomiwatech/Desktop/projects/Andela/bootCamp/Maintenance-Tracker/server/controllers","sourcesContent":["let dataStore = [];\nclass userClass {\n\n    create(req, res, next) {\n        console.log(req.body)\n        dataStore.push(req.body);\n        return res.status(201).json({\n            'statusCode': '00',\n            'statusMessage': 'New request created successfully'\n        })\n    }\n\n\n    deleteOne(req, res, next) {\n        let foundAt = this.find();\n        if (foundAt > -1) {\n            dataStore.splice(foundAt, 1);\n            dataStore.pop()\n            return true;\n        }\n\n    }\n\n    findById(req, res, next) {\n        let id = req.params.id;\n        console.log(\"id \" + id);\n        for (let i = 0; i < dataStore.length; ++i) {\n            if (dataStore[i].id == id) {\n                return res.status(200).json({\n                    'statusCode': '00',\n                    'statusMessage': 'User found',\n                    'data': dataStore[i]\n                })\n            }\n        }\n\n        return res.status(404).json({\n            'statusCode': '04',\n            'statusMessage': 'User not found'\n        })\n    }\n\n\n    getAll(req, res, next) {\n        console.log(dataStore)\n        return res.status(200).json({\n            'statusCode': '00',\n            'statusMessage': 'Successfully fetched all users requests',\n            'data': dataStore\n        });\n    }\n\n\n    deleteAll(req, res, next) {\n        dataStore.length = 0\n        return res.status(200).json({\n            'statusCode': '00',\n            'statusMessage': 'Data Source Emptied Successfully',\n            'data': dataStore\n        });\n    }\n\n\n    updateOne(req, res, next) {\n\n        function find(id) {\n            console.log('cLalled me')\n            for (let i = 0; i < dataStore.length; ++i) {\n                if (dataStore[i].id == id) {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n\n        const { id, name, model, desciption, defect } = req.body;\n        let foundOne = find(id);\n        if (foundOne > -1) {\n            for (let i = 0; i < dataStore.length; ++i) {\n                if (dataStore[i].id == id) {\n                    dataStore[i].id = id;\n                    dataStore[i].name = name;\n                    dataStore[i].model = model;\n                    dataStore[i].desciption = desciption;\n                    dataStore[i].defect = defect;\n\n                    return res.status(200).json({\n                        'statusCode': '00',\n                        'statusMessage': 'Updated',\n                        'data': dataStore[i]\n                    })\n                }\n            }\n        }\n\n        return res.status(400).json({\n            'statusCode': '00',\n            'statusMessage': 'User with id not found'\n        })\n\n    }\n\n    static toString() {\n        return dataStore;\n    }\n\n}\n\nconst userController = new userClass();\n\nexport default userController;"]}