'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _user = require('../helpers/users/user');

var _user2 = _interopRequireDefault(_user);

var _dummy = require('../dummy/dummy');

var _dummy2 = _interopRequireDefault(_dummy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserController = function () {
  function UserController() {
    _classCallCheck(this, UserController);
  }

  _createClass(UserController, null, [{
    key: 'create',
    value: function create(req, res) {
      var id = req.body.id;

      var position = _user2.default.findUser(_dummy2.default, id);
      if (position > -1) {
        return res.status(400).json({
          responseCode: '01',
          responseMessage: 'User Already Exists'
        });
      }
      _dummy2.default.push(req.body);
      return res.status(201).json({
        responseCode: '00',
        responseMessage: 'New request created successfully'
      });
    }
  }, {
    key: 'deleteOne',
    value: function deleteOne(req, res) {
      var id = req.params.id;

      var position = _user2.default.findUser(_dummy2.default, id);
      if (position > -1) {
        _dummy2.default.splice(position, 1);
        return res.status(200).json({
          responseCode: '00',
          responseMessage: 'User Deleted',
          data: _dummy2.default
        });
      }
      return res.status(400).json({
        responseCode: '01',
        responseMessage: 'User Could not be deleted. ID not found'
      });
    }
  }, {
    key: 'findById',
    value: function findById(req, res) {
      var id = req.params.id;

      var position = _user2.default.findUser(_dummy2.default, id);
      if (position > -1) {
        return res.status(200).json({
          responseCode: '00',
          responseMessage: 'User found',
          data: _dummy2.default[position]
        });
      }

      return res.status(400).json({
        responseCode: '01',
        responseMessage: 'User not found'
      });
    }
  }, {
    key: 'getAll',
    value: function getAll(req, res) {
      return res.status(200).json({
        responseCode: '00',
        responseMessage: 'Successfully fetched all users requests',
        data: _dummy2.default
      });
    }
  }, {
    key: 'deleteAll',
    value: function deleteAll(req, res) {
      _dummy2.default.length = 0;
      return res.status(200).json({
        responseCode: '00',
        responseMessage: 'Data Source Emptied Successfully',
        data: _dummy2.default
      });
    }
  }, {
    key: 'updateOne',
    value: function updateOne(req, res) {
      var position = _user2.default.findUser(_dummy2.default, req.body.id);
      if (position > -1) {
        _dummy2.default[position].id = req.body.id;
        _dummy2.default[position].name = req.body.name;
        _dummy2.default[position].model = req.body.model;
        _dummy2.default[position].description = req.body.description;
        _dummy2.default[position].defect = req.body.defect;
        return res.status(200).json({
          responseCode: '00',
          responseMessage: 'User details Updated',
          data: _dummy2.default[position]
        });
      }
      return res.status(400).json({
        responseCode: '01',
        responseMessage: 'User with id not found'
      });
    }
  }]);

  return UserController;
}();

exports.default = UserController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIlVzZXJDb250cm9sbGVyIiwicmVxIiwicmVzIiwiaWQiLCJib2R5IiwicG9zaXRpb24iLCJVc2VyaGVscGVyQ2xhc3MiLCJmaW5kVXNlciIsImRhdGFTdG9yZSIsInN0YXR1cyIsImpzb24iLCJyZXNwb25zZUNvZGUiLCJyZXNwb25zZU1lc3NhZ2UiLCJwdXNoIiwicGFyYW1zIiwic3BsaWNlIiwiZGF0YSIsImxlbmd0aCIsIm5hbWUiLCJtb2RlbCIsImRlc2NyaXB0aW9uIiwiZGVmZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7Ozs7O0lBRU1BLGM7Ozs7Ozs7MkJBQ1VDLEcsRUFBS0MsRyxFQUFLO0FBQUEsVUFDZEMsRUFEYyxHQUNQRixJQUFJRyxJQURHLENBQ2RELEVBRGM7O0FBRXRCLFVBQU1FLFdBQVdDLGVBQWdCQyxRQUFoQixDQUF5QkMsZUFBekIsRUFBb0NMLEVBQXBDLENBQWpCO0FBQ0EsVUFBSUUsV0FBVyxDQUFDLENBQWhCLEVBQW1CO0FBQ2pCLGVBQU9ILElBQUlPLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsd0JBQWMsSUFEWTtBQUUxQkMsMkJBQWlCO0FBRlMsU0FBckIsQ0FBUDtBQUlEO0FBQ0RKLHNCQUFVSyxJQUFWLENBQWVaLElBQUlHLElBQW5CO0FBQ0EsYUFBT0YsSUFBSU8sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQzFCQyxzQkFBYyxJQURZO0FBRTFCQyx5QkFBaUI7QUFGUyxPQUFyQixDQUFQO0FBSUQ7Ozs4QkFFZ0JYLEcsRUFBS0MsRyxFQUFLO0FBQUEsVUFDakJDLEVBRGlCLEdBQ1ZGLElBQUlhLE1BRE0sQ0FDakJYLEVBRGlCOztBQUV6QixVQUFNRSxXQUFXQyxlQUFnQkMsUUFBaEIsQ0FBeUJDLGVBQXpCLEVBQW9DTCxFQUFwQyxDQUFqQjtBQUNBLFVBQUlFLFdBQVcsQ0FBQyxDQUFo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dHMvQW5kZWxhL2Jvb3RDYW1wL01haW50ZW5hbmNlLVRyYWNrZXIvc2VydmVyL2NvbnRyb2xsZXJzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFVzZXJoZWxwZXJDbGFzcyBmcm9tICcuLi9oZWxwZXJzL3VzZXJzL3VzZXInO1xuaW1wb3J0IGRhdGFTdG9yZSBmcm9tICcuLi9kdW1teS9kdW1teSc7XG5cbmNsYXNzIFVzZXJDb250cm9sbGVyIHtcbiAgc3RhdGljIGNyZWF0ZShyZXEsIHJlcykge1xuICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5ib2R5O1xuICAgIGNvbnN0IHBvc2l0aW9uID0gVXNlcmhlbHBlckNsYXNzLmZpbmRVc2VyKGRhdGFTdG9yZSwgaWQpO1xuICAgIGlmIChwb3NpdGlvbiA+IC0xKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgICByZXNwb25zZUNvZGU6ICcwMScsXG4gICAgICAgIHJlc3BvbnNlTWVzc2FnZTogJ1VzZXIgQWxyZWFkeSBFeGlzdHMnXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YVN0b3JlLnB1c2gocmVxLmJvZHkpO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7XG4gICAgICByZXNwb25zZUNvZGU6ICcwMCcsXG4gICAgICByZXNwb25zZU1lc3NhZ2U6ICdOZXcgcmVxdWVzdCBjcmVhdGVkIHN1Y2Nlc3NmdWxseSdcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGVPbmUocmVxLCByZXMpIHtcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gVXNlcmhlbHBlckNsYXNzLmZpbmRVc2VyKGRhdGFTdG9yZSwgaWQpO1xuICAgIGlmIChwb3NpdGlvbiA+IC0xKSB7XG4gICAgICBkYXRhU3RvcmUuc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgIHJlc3BvbnNlQ29kZTogJzAwJyxcbiAgICAgICAgcmVzcG9uc2VNZXNzYWdlOiAnVXNlciBEZWxldGVkJyxcbiAgICAgICAgZGF0YTogZGF0YVN0b3JlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgIHJlc3BvbnNlQ29kZTogJzAxJyxcbiAgICAgIHJlc3BvbnNlTWVzc2FnZTogJ1VzZXIgQ291bGQgbm90IGJlIGRlbGV0ZWQuIElEIG5vdCBmb3VuZCdcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBmaW5kQnlJZChyZXEsIHJlcykge1xuICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgcG9zaXRpb24gPSBVc2VyaGVscGVyQ2xhc3MuZmluZFVzZXIoZGF0YVN0b3JlLCBpZCk7XG4gICAgaWYgKHBvc2l0aW9uID4gLTEpIHtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICAgIHJlc3BvbnNlQ29kZTogJzAwJyxcbiAgICAgICAgcmVzcG9uc2VNZXNzYWdlOiAnVXNlciBmb3VuZCcsXG4gICAgICAgIGRhdGE6IGRhdGFTdG9yZVtwb3NpdGlvbl1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICByZXNwb25zZUNvZGU6ICcwMScsXG4gICAgICByZXNwb25zZU1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCdcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRBbGwocmVxLCByZXMpIHtcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgcmVzcG9uc2VDb2RlOiAnMDAnLFxuICAgICAgcmVzcG9uc2VNZXNzYWdlOiAnU3VjY2Vzc2Z1bGx5IGZldGNoZWQgYWxsIHVzZXJzIHJlcXVlc3RzJyxcbiAgICAgIGRhdGE6IGRhdGFTdG9yZVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGRlbGV0ZUFsbChyZXEsIHJlcykge1xuICAgIGRhdGFTdG9yZS5sZW5ndGggPSAwO1xuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgICByZXNwb25zZUNvZGU6ICcwMCcsXG4gICAgICByZXNwb25zZU1lc3NhZ2U6ICdEYXRhIFNvdXJjZSBFbXB0aWVkIFN1Y2Nlc3NmdWxseScsXG4gICAgICBkYXRhOiBkYXRhU3RvcmVcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyB1cGRhdGVPbmUocmVxLCByZXMpIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IFVzZXJoZWxwZXJDbGFzcy5maW5kVXNlcihkYXRhU3RvcmUsIHJlcS5ib2R5LmlkKTtcbiAgICBpZiAocG9zaXRpb24gPiAtMSkge1xuICAgICAgZGF0YVN0b3JlW3Bvc2l0aW9uXS5pZCA9IHJlcS5ib2R5LmlkO1xuICAgICAgZGF0YVN0b3JlW3Bvc2l0aW9uXS5uYW1lID0gcmVxLmJvZHkubmFtZTtcbiAgICAgIGRhdGFTdG9yZVtwb3NpdGlvbl0ubW9kZWwgPSByZXEuYm9keS5tb2RlbDtcbiAgICAgIGRhdGFTdG9yZVtwb3NpdGlvbl0uZGVzY3JpcHRpb24gPSByZXEuYm9keS5kZXNjcmlwdGlvbjtcbiAgICAgIGRhdGFTdG9yZVtwb3NpdGlvbl0uZGVmZWN0ID0gcmVxLmJvZHkuZGVmZWN0O1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgICAgcmVzcG9uc2VDb2RlOiAnMDAnLFxuICAgICAgICByZXNwb25zZU1lc3NhZ2U6ICdVc2VyIGRldGFpbHMgVXBkYXRlZCcsXG4gICAgICAgIGRhdGE6IGRhdGFTdG9yZVtwb3NpdGlvbl1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgcmVzcG9uc2VDb2RlOiAnMDEnLFxuICAgICAgcmVzcG9uc2VNZXNzYWdlOiAnVXNlciB3aXRoIGlkIG5vdCBmb3VuZCdcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBVc2VyQ29udHJvbGxlcjtcbiJdfQ==