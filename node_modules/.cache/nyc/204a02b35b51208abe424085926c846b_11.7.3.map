{"version":3,"sources":["user.js"],"names":["chai","use","chaiHttp","should","describe","it","done","request","server","get","end","err","res","have","status","body","property","to","equals","be","an"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,eAAKC,GAAL,CAASC,kBAAT;AACAF,eAAKG,MAAL;;AAEAC,SAAS,uBAAT,EAAkC,YAAM;;AAEpCA,aAAS,eAAT,EAA0B,YAAM;AAC5BC,WAAG,6BAAH,EAAkC,UAACC,IAAD,EAAU;AACxCN,2BAAKO,OAAL,CAAaC,eAAb,EACKC,GADL,CACS,yBADT,EAEKC,GAFL,CAES,UAACC,GAAD,EAAMC,GAAN,EAAc;AACfA,oBAAIT,MAAJ,CAAWU,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AACAF,oBAAIG,IAAJ,CAASZ,MAAT,CAAgBU,IAAhB,CAAqBG,QAArB,CAA8B,iBAA9B,EAAiDC,EAAjD,CAAoDC,MAApD,CAA2D,yCAA3D;AACAN,oBAAIG,IAAJ,CAASZ,MAAT,CAAgBU,IAAhB,CAAqBG,QAArB,CAA8B,cAA9B,EAA8CC,EAA9C,CAAiDC,MAAjD,CAAwD,IAAxD;AACAN,oBAAIG,IAAJ,CAASZ,MAAT,CAAgBU,IAAhB,CAAqBG,QAArB,CAA8B,MAA9B,EAAsCC,EAAtC,CAAyCE,EAAzC,CAA4CC,EAA5C,CAA+C,OAA/C;AACAd;AACH,aARL;AASH,SAVD;AAWH,KAZD;AAaA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACH,CAvCD","file":"user.js","sourceRoot":"/home/tomiwatech/Desktop/projects/Andela/bootCamp/Maintenance-Tracker/server/tests/controllers","sourcesContent":["import chai  from 'chai';\nimport chaiHttp from 'chai-http';\nimport server from '../../index';\nimport UserController from '../../controllers/userController';\n\nchai.use(chaiHttp);\nchai.should();\n\ndescribe('Users Controller Test', () => {\n\n    describe('/GET Requests', () => {\n        it('it should GET all the users', (done) => {\n            chai.request(server)\n                .get('/api/v1/users/requests/')\n                .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.should.have.property('responseMessage').to.equals('Successfully fetched all users requests');\n                    res.body.should.have.property('responseCode').to.equals('00');\n                    res.body.should.have.property('data').to.be.an('array');\n                    done();\n                });\n        });\n    });\n    /*\n    * Test the /POST route\n    */\n    // describe('/POST book', () => {\n    //     it('it should not POST a book without pages field', (done) => {\n    //         let book = {\n    //             title: \"The Lord of the Rings\",\n    //             author: \"J.R.R. Tolkien\",\n    //             year: 1954\n    //         }\n    //         chai.request(server)\n    //             .post('/book')\n    //             .send(book)\n    //             .end((err, res) => {\n    //                 res.should.have.status(200);\n    //                 res.body.should.be.a('object');\n    //                 res.body.should.have.property('errors');\n    //                 res.body.errors.should.have.property('pages');\n    //                 res.body.errors.pages.should.have.property('kind').eql('required');\n    //                 done();\n    //             });\n    //     });\n\n    // });\n});"]}