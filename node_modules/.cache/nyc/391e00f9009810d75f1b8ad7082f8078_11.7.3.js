'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _user = require('../helpers/users/user');

var _user2 = _interopRequireDefault(_user);

var _dummy = require('../dummy/dummy');

var _dummy2 = _interopRequireDefault(_dummy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @exports
 * @class userController
 */
var UserController = function () {
  function UserController() {
    _classCallCheck(this, UserController);
  }

  _createClass(UserController, null, [{
    key: 'create',

    /**
     * Creates a new request
     * @staticmethod
     * @param  {object} req - Request object
     * @param {object} res - Response object
     * @return {json} res.json
     */
    value: function create(req, res) {
      var id = req.body.id;

      var position = _user2.default.findUser(_dummy2.default, id);
      if (position > -1) {
        return res.status(400).json({
          responseCode: '01',
          responseMessage: 'User Already Exists'
        });
      }
      _dummy2.default.push(req.body);
      return res.status(201).json({
        responseCode: '00',
        responseMessage: 'New request created successfully'
      });
    }
    /**
     * Deletes a request by id
     *
     * @staticmethod
     * @param  {object} req - Request object
     * @param {object} res - Response object
     * @return {json} res.json
     */

  }, {
    key: 'deleteOne',
    value: function deleteOne(req, res) {
      var id = req.params.id;

      var position = _user2.default.findUser(_dummy2.default, id);
      if (position > -1) {
        _dummy2.default.splice(position, 1);
        return res.status(200).json({
          responseCode: '00',
          responseMessage: 'User Deleted',
          data: _dummy2.default
        });
      }
      return res.status(400).json({
        responseCode: '01',
        responseMessage: 'User Could not be deleted. ID not found'
      });
    }
    /**
     * Find a request by id
     *
     * @staticmethod
     * @param  {object} req - Request object
     * @param {object} res - Response object
     * @return {json} res.json
     */

  }, {
    key: 'findById',
    value: function findById(req, res) {
      var id = req.params.id;

      var position = _user2.default.findUser(_dummy2.default, id);
      if (position > -1) {
        return res.status(200).json({
          responseCode: '00',
          responseMessage: 'User found',
          data: _dummy2.default[position]
        });
      }

      return res.status(400).json({
        responseCode: '01',
        responseMessage: 'User not found'
      });
    }
    /**
     * Get all requests
     *
     * @staticmethod
     * @param  {object} req - Request object
     * @param {object} res - Response object
     * @return {json} res.json
     */

  }, {
    key: 'getAll',
    value: function getAll(req, res) {
      return res.status(200).json({
        responseCode: '00',
        responseMessage: 'Successfully fetched all users requests',
        data: _dummy2.default
      });
    }
    /**
     * Delete all requests
     *
     * @staticmethod
     * @param  {object} req - Request object
     * @param {object} res - Response object
     * @return {json} res.json
     */

  }, {
    key: 'deleteAll',
    value: function deleteAll(req, res) {
      _dummy2.default.length = 0;
      return res.status(200).json({
        responseCode: '00',
        responseMessage: 'Data Source Emptied Successfully',
        data: _dummy2.default
      });
    }
    /**
     * Update request by id
     *
     * @staticmethod
     * @param  {object} req - Request object
     * @param {object} res - Response object
     * @return {json} res.json
     */

  }, {
    key: 'updateOne',
    value: function updateOne(req, res) {
      var position = _user2.default.findUser(_dummy2.default, req.body.id);
      if (position > -1) {
        _dummy2.default[position].id = req.body.id;
        _dummy2.default[position].name = req.body.name;
        _dummy2.default[position].model = req.body.model;
        _dummy2.default[position].description = req.body.description;
        _dummy2.default[position].defect = req.body.defect;
        return res.status(200).json({
          responseCode: '00',
          responseMessage: 'User details Updated',
          data: _dummy2.default[position]
        });
      }
      return res.status(400).json({
        responseCode: '01',
        responseMessage: 'User with id not found'
      });
    }
  }]);

  return UserController;
}();

exports.default = UserController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,