{"version":3,"sources":["user.js"],"names":["should","chai","use","chaiHttp","describe","it","result","UserController","toString","to","equal","done","request","server","get","end","err","res","have","status","body","be","a"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;AACA;;;;;;AAEA,IAAIA,iCAASC,WAAKD,MAAL,EAAT,CAAJ;;;AAEAC,WAAKC,GAAL,CAASC,kBAAT;;;AAKAC,SAAS,uBAAT,EAAkC,YAAM;AAAA;AAAA;;;AAEpCA,aAAS,eAAT,EAA0B,YAAM;AAAA;AAAA;;AAC5BC,WAAG,uBAAH,EAA4B,YAAM;AAAA;;AAC9B,gBAAMC,iCAASC,yBAAeC,QAAf,EAAT,CAAN;AAD8B;AAE9B,8BAAOF,MAAP,EAAeG,EAAf,CAAkBC,KAAlB,CAAwB,MAAxB;AACH,SAHD;AAIH,KALD;;AAFoC;AASpCN,aAAS,UAAT,EAAqB,YAAM;AAAA;AAAA;;AACvBC,WAAG,6BAAH,EAAkC,UAACM,IAAD,EAAU;AAAA;AAAA;;AACxCV,uBAAKW,OAAL,CAAaC,eAAb,EACKC,GADL,CACS,QADT,EAEKC,GAFL,CAES,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA;AAAA;;AACfA,oBAAIjB,MAAJ,CAAWkB,IAAX,CAAgBC,MAAhB,CAAuB,GAAvB;AADe;AAEfF,oBAAIG,IAAJ,CAASpB,MAAT,CAAgBqB,EAAhB,CAAmBC,CAAnB,CAAqB,OAArB;AAFe;AAGfX;AACH,aANL;AAOH,SARD;AASH,KAVD;AAWA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACH,CA5CD","file":"user.js","sourceRoot":"/home/tomiwatech/Desktop/projects/Andela/bootCamp/Maintenance-Tracker/server/tests/controllers","sourcesContent":["import { expect, chai } from 'chai';\nimport { chaiHttp } from 'chai-http';\nimport server from '../../index';\nimport UserController from '../../controllers/userController';\n\nlet should = chai.should();\n\nchai.use(chaiHttp);\n\n\n\n\ndescribe('Users Controller Test', () => {\n\n    describe('Testing mocha', () => {\n        it('It should return mike', () => {\n            const result = UserController.toString();\n            expect(result).to.equal('mike');\n        });\n    });\n\n    describe('/GET all', () => {\n        it('it should GET all the users', (done) => {\n            chai.request(server)\n                .get('/users')\n                .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.should.be.a('array');\n                    done();\n                });\n        });\n    });\n    /*\n    * Test the /POST route\n    */\n    // describe('/POST book', () => {\n    //     it('it should not POST a book without pages field', (done) => {\n    //         let book = {\n    //             title: \"The Lord of the Rings\",\n    //             author: \"J.R.R. Tolkien\",\n    //             year: 1954\n    //         }\n    //         chai.request(server)\n    //             .post('/book')\n    //             .send(book)\n    //             .end((err, res) => {\n    //                 res.should.have.status(200);\n    //                 res.body.should.be.a('object');\n    //                 res.body.should.have.property('errors');\n    //                 res.body.errors.should.have.property('pages');\n    //                 res.body.errors.pages.should.have.property('kind').eql('required');\n    //                 done();\n    //             });\n    //     });\n\n    // });\n});"]}