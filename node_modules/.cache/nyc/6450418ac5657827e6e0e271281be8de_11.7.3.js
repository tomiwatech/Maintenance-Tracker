'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _user = require('../helpers/users/user');

var _user2 = _interopRequireDefault(_user);

var _dummy = require('../dummy/dummy');

var _dummy2 = _interopRequireDefault(_dummy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var UserController = function () {
  function UserController() {
    _classCallCheck(this, UserController);
  }

  _createClass(UserController, null, [{
    key: 'create',
    value: function create(req, res) {
      var id = req.body.id;

      var position = _user2.default.findUser(_dummy2.default, id);
      if (position > -1) {
        return res.status(400).json({
          responseCode: '01',
          responseMessage: 'User Already Exists'
        });
      }
      _dummy2.default.push(req.body);
      return res.status(201).json({
        responseCode: '00',
        responseMessage: 'New request created successfully'
      });
    }
  }, {
    key: 'deleteOne',
    value: function deleteOne(req, res) {
      var id = req.params.id;

      var position = _user2.default.findUser(_dummy2.default, id);
      if (position > -1) {
        _dummy2.default.splice(position, 1);
        return res.status(200).json({
          responseCode: '00',
          responseMessage: 'User Deleted',
          data: _dummy2.default
        });
      }
      return res.status(400).json({
        responseCode: '01',
        responseMessage: 'User Could not be deleted. ID not found'
      });
    }
  }, {
    key: 'findById',
    value: function findById(req, res) {
      var id = req.params.id;

      var position = _user2.default.findUser(_dummy2.default, id);
      if (position > -1) {
        return res.status(200).json({
          responseCode: '00',
          responseMessage: 'User found',
          data: _dummy2.default[position]
        });
      }

      return res.status(400).json({
        responseCode: '01',
        responseMessage: 'User not found'
      });
    }
  }, {
    key: 'getAll',
    value: function getAll(req, res) {
      return res.status(200).json({
        responseCode: '00',
        responseMessage: 'Successfully fetched all users requests',
        data: _dummy2.default
      });
    }
  }, {
    key: 'deleteAll',
    value: function deleteAll(req, res) {
      _dummy2.default.length = 0;
      return res.status(200).json({
        responseCode: '00',
        responseMessage: 'Data Source Emptied Successfully',
        data: _dummy2.default
      });
    }
  }, {
    key: 'updateOne',
    value: function updateOne(req, res) {
      var _req$body = req.body,
          name = _req$body.name,
          model = _req$body.model,
          description = _req$body.description,
          id = _req$body.id,
          defect = _req$body.defect;

      var position = _user2.default.findUser(_dummy2.default, id);
      if (position > -1) {
        _dummy2.default[position].id = id;
        _dummy2.default[position].name = name;
        _dummy2.default[position].model = model;
        _dummy2.default[position].description = description;
        _dummy2.default[position].defect = defect;
        return res.status(200).json({
          responseCode: '00',
          responseMessage: 'User details Updated',
          data: _dummy2.default[position]
        });
      }
      return res.status(400).json({
        responseCode: '01',
        responseMessage: 'User with id not found'
      });
    }
  }]);

  return UserController;
}();

exports.default = UserController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZXJDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIlVzZXJDb250cm9sbGVyIiwicmVxIiwicmVzIiwiaWQiLCJib2R5IiwicG9zaXRpb24iLCJVc2VyaGVscGVyQ2xhc3MiLCJmaW5kVXNlciIsImRhdGFTdG9yZSIsInN0YXR1cyIsImpzb24iLCJyZXNwb25zZUNvZGUiLCJyZXNwb25zZU1lc3NhZ2UiLCJwdXNoIiwicGFyYW1zIiwic3BsaWNlIiwiZGF0YSIsImxlbmd0aCIsIm5hbWUiLCJtb2RlbCIsImRlc2NyaXB0aW9uIiwiZGVmZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7Ozs7O0lBRU1BLGM7Ozs7Ozs7MkJBQ1VDLEcsRUFBS0MsRyxFQUFLO0FBQUEsVUFDZEMsRUFEYyxHQUNQRixJQUFJRyxJQURHLENBQ2RELEVBRGM7O0FBRXRCLFVBQU1FLFdBQVdDLGVBQWdCQyxRQUFoQixDQUF5QkMsZUFBekIsRUFBb0NMLEVBQXBDLENBQWpCO0FBQ0EsVUFBSUUsV0FBVyxDQUFDLENBQWhCLEVBQW1CO0FBQ2pCLGVBQU9ILElBQUlPLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsd0JBQWMsSUFEWTtBQUUxQkMsMkJBQWlCO0FBRlMsU0FBckIsQ0FBUDtBQUlEO0FBQ0RKLHNCQUFVSyxJQUFWLENBQWVaLElBQUlHLElBQW5CO0FBQ0EsYUFBT0YsSUFBSU8sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQzFCQyxzQkFBYyxJQURZO0FBRTFCQyx5QkFBaUI7QUFGUyxPQUFyQixDQUFQO0FBSUQ7Ozs4QkFFZ0JYLEcsRUFBS0MsRyxFQUFLO0FBQUEsVUFDakJDLEVBRGlCLEdBQ1ZGLElBQUlhLE1BRE0sQ0FDakJYLEVBRGlCOztBQUV6QixVQUFNRSxXQUFXQyxlQUFnQkMsUUFBaEIsQ0FBeUJDLGVBQXpCLEVBQW9DTCxFQUFwQyxDQUFqQjtBQUNBLFVBQUlFLFdBQVcsQ0FBQyxDQUFoQixFQUFtQjtBQUNqQkcsd0JBQVVPLE1BQVYsQ0FBaUJWLFFBQWpCLEVBQTJCLENBQTNCO0FBQ0EsZUFBT0gsSUFBSU8sTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQzFCQyx3QkFBYyxJQURZO0FBRTFCQywyQkFBaUIsY0FGUztBQUcxQkksZ0JBQU1SO0FBSG9CLFNBQXJCLENBQVA7QUFLRDtBQUNELGFBQU9OLElBQUlPLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsc0JBQWMsSUFEWTtBQUUxQkMseUJBQWlCO0FBRlMsT0FBckIsQ0FBUDtBQUlEOzs7NkJBRWVYLEcsRUFBS0MsRyxFQUFLO0FBQUEsVUFDaEJDLEVBRGdCLEdBQ1RGLElBQUlhLE1BREssQ0FDaEJYLEVBRGdCOztBQUV4QixVQUFNRSxXQUFXQyxlQUFnQkMsUUFBaEIsQ0FBeUJDLGVBQXpCLEVBQW9DTCxFQUFwQyxDQUFqQjtBQUNBLFVBQUlFLFdBQVcsQ0FBQyxDQUFoQixFQUFtQjtBQUNqQixlQUFPSCxJQUFJTyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFDMUJDLHdCQUFjLElBRFk7QUFFMUJDLDJCQUFpQixZQUZTO0FBRzFCSSxnQkFBTVIsZ0JBQVVILFFBQVY7QUFIb0IsU0FBckIsQ0FBUDtBQUtEOztBQUVELGFBQU9ILElBQUlPLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsc0JBQWMsSUFEWTtBQUUxQkMseUJBQWlCO0FBRlMsT0FBckIsQ0FBUDtBQUlEOzs7MkJBRWFYLEcsRUFBS0MsRyxFQUFLO0FBQ3RCLGFBQU9BLElBQUlPLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsc0JBQWMsSUFEWTtBQUUxQkMseUJBQWlCLHlDQUZTO0FBRzFCSSxjQUFNUjtBQUhvQixPQUFyQixDQUFQO0FBS0Q7Ozs4QkFFZ0JQLEcsRUFBS0MsRyxFQUFLO0FBQ3pCTSxzQkFBVVMsTUFBVixHQUFtQixDQUFuQjtBQUNBLGFBQU9mLElBQUlPLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsc0JBQWMsSUFEWTtBQUUxQkMseUJBQWlCLGtDQUZTO0FBRzFCSSxjQUFNUjtBQUhvQixPQUFyQixDQUFQO0FBS0Q7Ozs4QkFFZ0JQLEcsRUFBS0MsRyxFQUFLO0FBQUEsc0JBR3JCRCxJQUFJRyxJQUhpQjtBQUFBLFVBRXZCYyxJQUZ1QixhQUV2QkEsSUFGdUI7QUFBQSxVQUVqQkMsS0FGaUIsYUFFakJBLEtBRmlCO0FBQUEsVUFFVkMsV0FGVSxhQUVWQSxXQUZVO0FBQUEsVUFFR2pCLEVBRkgsYUFFR0EsRUFGSDtBQUFBLFVBRU9rQixNQUZQLGFBRU9BLE1BRlA7O0FBSXpCLFVBQU1oQixXQUFXQyxlQUFnQkMsUUFBaEIsQ0FBeUJDLGVBQXpCLEVBQW9DTCxFQUFwQyxDQUFqQjtBQUNBLFVBQUlFLFdBQVcsQ0FBQyxDQUFoQixFQUFtQjtBQUNqQkcsd0JBQVVILFFBQVYsRUFBb0JGLEVBQXBCLEdBQXlCQSxFQUF6QjtBQUNBSyx3QkFBVUgsUUFBVixFQUFvQmEsSUFBcEIsR0FBMkJBLElBQTNCO0FBQ0FWLHdCQUFVSCxRQUFWLEVBQW9CYyxLQUFwQixHQUE0QkEsS0FBNUI7QUFDQVgsd0JBQVVILFFBQVYsRUFBb0JlLFdBQXBCLEdBQWtDQSxXQUFsQztBQUNBWix3QkFBVUgsUUFBVixFQUFvQmdCLE1BQXBCLEdBQTZCQSxNQUE3QjtBQUNBLGVBQU9uQixJQUFJTyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFDMUJDLHdCQUFjLElBRFk7QUFFMUJDLDJCQUFpQixzQkFGUztBQUcxQkksZ0JBQU1SLGdCQUFVSCxRQUFWO0FBSG9CLFNBQXJCLENBQVA7QUFLRDtBQUNELGFBQU9ILElBQUlPLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUMxQkMsc0JBQWMsSUFEWTtBQUUxQkMseUJBQWlCO0FBRlMsT0FBckIsQ0FBUDtBQUlEOzs7Ozs7a0JBR1laLGMiLCJmaWxlIjoidXNlckNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdG9taXdhdGVjaC9EZXNrdG9wL3Byb2plY3RzL0FuZGVsYS9ib290Q2FtcC9NYWludGVuYW5jZS1UcmFja2VyL3NlcnZlci9jb250cm9sbGVycyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVc2VyaGVscGVyQ2xhc3MgZnJvbSAnLi4vaGVscGVycy91c2Vycy91c2VyJztcbmltcG9ydCBkYXRhU3RvcmUgZnJvbSAnLi4vZHVtbXkvZHVtbXknO1xuXG5jbGFzcyBVc2VyQ29udHJvbGxlciB7XG4gIHN0YXRpYyBjcmVhdGUocmVxLCByZXMpIHtcbiAgICBjb25zdCB7IGlkIH0gPSByZXEuYm9keTtcbiAgICBjb25zdCBwb3NpdGlvbiA9IFVzZXJoZWxwZXJDbGFzcy5maW5kVXNlcihkYXRhU3RvcmUsIGlkKTtcbiAgICBpZiAocG9zaXRpb24gPiAtMSkge1xuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgICAgICAgcmVzcG9uc2VDb2RlOiAnMDEnLFxuICAgICAgICByZXNwb25zZU1lc3NhZ2U6ICdVc2VyIEFscmVhZHkgRXhpc3RzJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIGRhdGFTdG9yZS5wdXNoKHJlcS5ib2R5KTtcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oe1xuICAgICAgcmVzcG9uc2VDb2RlOiAnMDAnLFxuICAgICAgcmVzcG9uc2VNZXNzYWdlOiAnTmV3IHJlcXVlc3QgY3JlYXRlZCBzdWNjZXNzZnVsbHknXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZGVsZXRlT25lKHJlcSwgcmVzKSB7XG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcbiAgICBjb25zdCBwb3NpdGlvbiA9IFVzZXJoZWxwZXJDbGFzcy5maW5kVXNlcihkYXRhU3RvcmUsIGlkKTtcbiAgICBpZiAocG9zaXRpb24gPiAtMSkge1xuICAgICAgZGF0YVN0b3JlLnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICByZXNwb25zZUNvZGU6ICcwMCcsXG4gICAgICAgIHJlc3BvbnNlTWVzc2FnZTogJ1VzZXIgRGVsZXRlZCcsXG4gICAgICAgIGRhdGE6IGRhdGFTdG9yZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICByZXNwb25zZUNvZGU6ICcwMScsXG4gICAgICByZXNwb25zZU1lc3NhZ2U6ICdVc2VyIENvdWxkIG5vdCBiZSBkZWxldGVkLiBJRCBub3QgZm91bmQnXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZmluZEJ5SWQocmVxLCByZXMpIHtcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gVXNlcmhlbHBlckNsYXNzLmZpbmRVc2VyKGRhdGFTdG9yZSwgaWQpO1xuICAgIGlmIChwb3NpdGlvbiA+IC0xKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICByZXNwb25zZUNvZGU6ICcwMCcsXG4gICAgICAgIHJlc3BvbnNlTWVzc2FnZTogJ1VzZXIgZm91bmQnLFxuICAgICAgICBkYXRhOiBkYXRhU3RvcmVbcG9zaXRpb25dXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgICAgcmVzcG9uc2VDb2RlOiAnMDEnLFxuICAgICAgcmVzcG9uc2VNZXNzYWdlOiAnVXNlciBub3QgZm91bmQnXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0QWxsKHJlcSwgcmVzKSB7XG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAgIHJlc3BvbnNlQ29kZTogJzAwJyxcbiAgICAgIHJlc3BvbnNlTWVzc2FnZTogJ1N1Y2Nlc3NmdWxseSBmZXRjaGVkIGFsbCB1c2VycyByZXF1ZXN0cycsXG4gICAgICBkYXRhOiBkYXRhU3RvcmVcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBkZWxldGVBbGwocmVxLCByZXMpIHtcbiAgICBkYXRhU3RvcmUubGVuZ3RoID0gMDtcbiAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgcmVzcG9uc2VDb2RlOiAnMDAnLFxuICAgICAgcmVzcG9uc2VNZXNzYWdlOiAnRGF0YSBTb3VyY2UgRW1wdGllZCBTdWNjZXNzZnVsbHknLFxuICAgICAgZGF0YTogZGF0YVN0b3JlXG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgdXBkYXRlT25lKHJlcSwgcmVzKSB7XG4gICAgY29uc3Qge1xuICAgICAgbmFtZSwgbW9kZWwsIGRlc2NyaXB0aW9uLCBpZCwgZGVmZWN0XG4gICAgfSA9IHJlcS5ib2R5O1xuICAgIGNvbnN0IHBvc2l0aW9uID0gVXNlcmhlbHBlckNsYXNzLmZpbmRVc2VyKGRhdGFTdG9yZSwgaWQpO1xuICAgIGlmIChwb3NpdGlvbiA+IC0xKSB7XG4gICAgICBkYXRhU3RvcmVbcG9zaXRpb25dLmlkID0gaWQ7XG4gICAgICBkYXRhU3RvcmVbcG9zaXRpb25dLm5hbWUgPSBuYW1lO1xuICAgICAgZGF0YVN0b3JlW3Bvc2l0aW9uXS5tb2RlbCA9IG1vZGVsO1xuICAgICAgZGF0YVN0b3JlW3Bvc2l0aW9uXS5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgZGF0YVN0b3JlW3Bvc2l0aW9uXS5kZWZlY3QgPSBkZWZlY3Q7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgICAgICByZXNwb25zZUNvZGU6ICcwMCcsXG4gICAgICAgIHJlc3BvbnNlTWVzc2FnZTogJ1VzZXIgZGV0YWlscyBVcGRhdGVkJyxcbiAgICAgICAgZGF0YTogZGF0YVN0b3JlW3Bvc2l0aW9uXVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7XG4gICAgICByZXNwb25zZUNvZGU6ICcwMScsXG4gICAgICByZXNwb25zZU1lc3NhZ2U6ICdVc2VyIHdpdGggaWQgbm90IGZvdW5kJ1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJDb250cm9sbGVyO1xuIl19