{"version":3,"sources":["user.js"],"names":["chai","use","chaiHttp","should","describe","it","done","request","server","get","end","err","res","have","status","body","property","to","equals","be","an","requestId","deep","equal","responseCode","responseMessage","requestBody","name","model","description","id","defect","post","send","data","desciption","put","delete"],"mappings":"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","file":"user.js","sourceRoot":"/home/tomiwatech/Desktop/projects/Andela/bootCamp/Maintenance-Tracker/server/tests/controllers","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport server from '../../index';\nimport UserController from '../../controllers/userController';\n\nchai.use(chaiHttp);\nchai.should();\n\ndescribe('Users Controller', () => {\n\n    /*\n   * Test the /GET route\n   */\n    describe('/GET REQUEST', () => {\n        it('it should GET all users requests', function(done){\n            chai.request(server)\n                .get('/api/v1/users/requests/')\n                .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.should.have.property('responseMessage').to.equals('Successfully fetched all users requests');\n                    res.body.should.have.property('responseCode').to.equals('00');\n                    res.body.should.have.property('data').to.be.an('array');\n                    done();\n                });\n        });\n\n        it('it should GET user request by id specified', (done) => {\n            let requestId = 1;\n            chai.request(server)\n                .get(`/api/v1/users/requests/${requestId}`)\n                .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.should.have.property('responseMessage').to.equals('User found');\n                    res.body.should.have.property('responseCode').to.equals('00');\n                    res.body.should.have.property('data').to.be.an('object');\n                    done();\n                });\n        });\n\n        it('it should not GET user request because id is not found', function(done){\n            let requestId = 7;\n            chai.request(server)\n                .get(`/api/v1/users/requests/${requestId}`)\n                .end((err, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.deep.equal({\n                        responseCode: '01',\n                        responseMessage: 'User not found'\n                    })\n                    done();\n                });\n        });\n    });\n\n    /*\n    * Test the /POST route\n    */\n    describe('/POST REQUEST', () => {\n        it('it should make a post request if all fields are not empty ', (done) => {\n            let requestBody = {\n                name: \"Sanni Oluwas\",\n                model: \"BMW\",\n                description: \"Best in lagos\",\n                id: \"3\",\n                defect: \"bREAKOM\"\n            }\n            chai.request(server)\n                .post('/api/v1/users/requests/')\n                .send(requestBody)\n                .end((err, res) => {\n                    res.should.have.status(201);\n                    res.body.should.be.deep.equal({\n                        responseCode: '00',\n                        responseMessage: 'New request created successfully'\n                    })\n                    done();\n                });\n        });\n\n        it('it should not make a post request if some fields are empty ', (done) => {\n            let body = {\n                name: \"\",\n                model: \"hh\",\n                description: \"\",\n                id: \"2\",\n                defect: \"Faulty\"\n            }\n            chai.request(server)\n                .post('/api/v1/users/requests/')\n                .send(body)\n                .end((err, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.deep.equal({\n                        responseCode: '01',\n                        responseMessage: 'Please fill all fields'\n                    })\n                    done();\n                });\n        });\n\n        it('it should throw an error when you try to add duplicate data ', (done) => {\n            let data = {\n                name: 'Sanni Mikolo',\n                model: 'hello boy',\n                desciption: 'i am not a nigerian developer',\n                id: 2,\n                defect: 'broken'\n            }\n            chai.request(server)\n                .post('/api/v1/users/requests/')\n                .send(data)\n                .end((err, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.deep.equal({\n                        responseCode: '01',\n                        responseMessage: 'User Already Exists'\n                    })\n                    done();\n                });\n        });\n\n    });\n\n    /*\n    * Test the /UPDATE route\n    */\n    describe('/UPDATE REQUEST', () => {\n        it('it should update the request if request is not empty ', (done) => {\n            let request = {\n                name: \"finallize\",\n                model: \"hh\",\n                description: \"Best in town\",\n                id: \"3\",\n                defect: \"Faulty\"\n            }\n            chai.request(server)\n                .put('/api/v1/users/requests/update')\n                .send(request)\n                .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.should.be.deep.equal({\n                        responseCode: '00',\n                        responseMessage: 'User details Updated',\n                        data: {\n                            name: \"finallize\",\n                            model: \"hh\",\n                            description: \"Best in town\",\n                            id: \"3\",\n                            defect: \"Faulty\"\n                        }\n                    })\n                    done();\n                });\n        });\n\n        it('it should not update the request if some request fields are empty ', (done) => {\n            let request = {\n                name: \"\",\n                model: \"\",\n                description: \"Best in town\",\n                id: \"\",\n                defect: \"Faulty\"\n            }\n            chai.request(server)\n                .put('/api/v1/users/requests/update')\n                .send(request)\n                .end((err, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.deep.equal({\n                        responseCode: '01',\n                        responseMessage: 'Please fill all fields'\n                    })\n                    done();\n                });\n        });\n\n        it('it should not update the request if request does not exist in db in the first place ', (done) => {\n            let request = {\n                name: \"finallize\",\n                model: \"hh\",\n                description: \"Best in town\",\n                id: \"10\",\n                defect: \"Faulty\"\n            }\n            chai.request(server)\n                .put('/api/v1/users/requests/update')\n                .send(request)\n                .end((err, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.deep.equal({\n                        responseCode: '01',\n                        responseMessage: 'User with id not found'\n                    })\n                    done();\n                });\n        });\n    });\n\n    /*\n    * Test the /DELETE route\n    */\n\n    describe('/DELETE REQUEST', () => {\n\n        it('it should delete user request by id specified', (done) => {\n            chai.request(server)\n                .delete('/api/v1/users/requests/3')\n                .end((err, res) => {\n                    res.should.have.status(200);\n                    res.body.should.have.property('responseMessage').to.equals('User Deleted');\n                    res.body.should.have.property('responseCode').to.equals('00');\n                    res.body.should.have.property('data').to.be.an('array');\n                    done();\n                });\n        });\n\n        it('it should not delete user request because id is not found', (done) => {\n            chai.request(server)\n                .delete('/api/v1/users/requests/100')\n                .end((err, res) => {\n                    res.should.have.status(400);\n                    res.body.should.be.deep.equal({\n                        responseCode: '01',\n                        responseMessage: 'User Could not be deleted. ID not found'\n                    })\n                    done();\n                });\n        });\n    });\n\n});"]}